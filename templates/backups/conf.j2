# gpg encryption settings, simple settings:
#
#  GPG_KEY='disabled' - disables encryption alltogether
#  GPG_KEY='<key1>[,<key2>]'; GPG_PW='pass' - encrypt with keys, sign with key1 if secret key available and use GPG_PW for sign & decrypt
#  GPG_PW='passphrase' - symmetric encryption using passphrase only
#
# GPG_KEY='{{ gpg_key_id }}'
# GPG_PW='{{ gpg_key_pw }}'
#
GPG_KEY=disabled

# gpg encryption settings in detail (extended settings)
# the above settings translate to the following more specific settings
#
#  GPG_KEYS_ENC='<keyid1>,[<keyid2>,...]' - list of pubkeys to encrypt to
#  GPG_KEY_SIGN='<keyid1>|disabled' - a secret key for signing
#  GPG_PW='<passphrase>' - needed for signing, decryption and symmetric encryption. If you want to deliver different passphrases for e.g. several keys or symmetric encryption plus key signing you can use gpg-agent. 
#
#  Add '--use-agent' to the duplicity parameters below. Also see "A NOTE ON SYMMETRIC ENCRYPTION AND SIGNING" in duplicity manpage notes on en/decryption private key and passphrase will only be needed for decryption or signing.
#  decryption happens on restore and incrementals (compare archdir contents). For security reasons it makes sense to separate the signing key from the encryption keys. https://answers.launchpad.net/duplicity/+question/107216
#
#GPG_KEYS_ENC='<pubkey1>,<pubkey2>,...'
#GPG_KEY_SIGN='<prvkey>'

# set if signing key passphrase differs from encryption (key) passphrase
# NOTE: available since duplicity 0.6.14, translates to SIGN_PASSPHRASE
#
#GPG_PW_SIGN='<signpass>'

# gpg options passed from duplicity to gpg process (default='')
# e.g. "--trust-model pgp|classic|direct|always" 
#   or "--compress-algo=bzip2 --bzip2-compress-level=9"
#   or "--personal-cipher-preferences AES256,AES192,AES..."
#   or "--homedir ~/.duply" - keep keyring and gpg settings duply specific
#
#GPG_OPTS=''

# disable preliminary tests with the following setting
#
#GPG_TEST='disabled'

# probably one out of cloudfiles backend user id is CLOUDFILES_USERNAME, password is CLOUDFILES_APIKEY, you might need to set CLOUDFILES_AUTHURL manually
#
# ATTENTION: characters other than A-Za-z0-9.-_.~ in the URL have to be replaced by their url encoded pendants, see http://en.wikipedia.org/wiki/Url_encoding 
#            if you define the credentials as TARGET_USER, TARGET_PASS below duply will try to url_encode them for you if the need arises
#
TARGET='{{ s3_current_backup_folder }}'

# optionally the username/password can be defined as extra variables setting them here _and_ in TARGET results in an error
#
TARGET_USER='{{ aws_access_key }}'
TARGET_PASS='{{ aws_secret_key }}'

# base directory to backup
#
SOURCE='{{ current_backup_path }}'

# a command that runs duplicity e.g. shape bandwidth use via trickle "trickle -s -u 640 -d 5120" # 5Mb up, 40Mb down"
#
#DUPL_PRECMD=""

# exclude folders containing exclusion file, uncomment the following two lines to enable this setting.
#
#FILENAME='.duplicity-ignore'
#DUPL_PARAMS="$DUPL_PARAMS --exclude-if-present '$FILENAME'"

# Time frame for old backups to keep, Used for the "purge" command. See duplicity man page, chapter TIME_FORMATS)
#
MAX_AGE={{ max_age }}

# Number of full backups to keep. Used for the "purge-full" command. See duplicity man page, action "remove-all-but-n-full".
#
MAX_FULL_BACKUPS={{ max_full_backups }}

# Number of full backups for which incrementals will be kept for. Used for the "purge-incr" command. See duplicity man page, action "remove-all-inc-of-but-n-full".
#
#MAX_FULLS_WITH_INCRS=1

# activates duplicity --full-if-older-than option.
#
MAX_FULLBKP_AGE={{ full_if_older_than }}

# Forces a full backup if last full backup reaches a specified age, for the format of MAX_FULLBKP_AGE see duplicity man page, chapter TIME_FORMATS
#
#DUPL_PARAMS="$DUPL_PARAMS --full-if-older-than $MAX_FULLBKP_AGE " 

# sets duplicity --volsize option (available since v0.4.3.RC7) set the size of backup chunks to VOLSIZE MB instead of the default 25MB. VOLSIZE must be number of MB's to set the volume size to.
#
#VOLSIZE=50
#DUPL_PARAMS="$DUPL_PARAMS --volsize $VOLSIZE "

# verbosity of output (error 0, warning 1-2, notice 3-4, info 5-8, debug 9) default is 4, if not set
#
VERBOSITY={{ verbosity }}

# temporary file space. at least the size of the biggest file in backup for a successful restoration process. (default is '/tmp', if not set)
#
#TEMP_DIR=/tmp

# Modifies archive-dir option (since 0.6.0) Defines a folder that holds unencrypted meta data of the backup, enabling new incrementals without the need to decrypt backend metadata first. If empty or deleted somehow, the private key and it's password are needed.
# NOTE: This is confidential data. Put it somewhere safe. It can grow quite big over time so you might want to put it not in the home dir.
#
# default '~/.cache/duplicity/duply_<profile>/'
# if set  '${ARCH_DIR}/<profile>'
#
#ARCH_DIR=/some/space/safe/.duply-cache

# DEPRECATED setting
# sets duplicity --time-separator option (since v0.4.4.RC2) to allow users to change the time separator from ':' to another character that will work on their system.  HINT: For Windows SMB shares, use --time-separator='_'.
#
# NOTE: '-' is not valid as it conflicts with date separator.
# ATTENTION: only use this with duplicity < 0.5.10, since then default file naming is compatible and this option is pending depreciation
#
#DUPL_PARAMS="$DUPL_PARAMS --time-separator _ "

# DEPRECATED setting
# activates duplicity --short-filenames option, when uploading to a filesystem that can't have filenames longer than 30 characters (e.g. Mac OS 8) or have problems with ':' as part of the filename (e.g. Microsoft Windows)
# ATTENTION: only use this with duplicity < 0.5.10, later versions default file naming is compatible and this option is pending depreciation
#
#DUPL_PARAMS="$DUPL_PARAMS --short-filenames "

# more duplicity command line options can be added in the following way don't forget to leave a separating space char at the end
#
#DUPL_PARAMS="$DUPL_PARAMS --put_your_options_here " 
